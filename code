<!DOCTYPE html>
<html lang="id"> <!-- Menentukan bahasa dokumen sebagai bahasa Indonesia -->
<head>
  <meta charset="UTF-8"> <!-- Menentukan karakter encoding sebagai UTF-8 -->
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> <!-- Mengatur viewport untuk responsif -->
  <title>Prediksi Hama Berdasarkan Cuaca</title> <!-- Judul halaman -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"> <!-- Menghubungkan ke Font Awesome untuk ikon -->
  <style>
    /* Gaya Umum */
    * {
        margin: 0; /* Menghapus margin default */
        padding: 0; /* Menghapus padding default */
        box-sizing: border-box; /* Mengatur box-sizing untuk semua elemen */
    }

    body {
        font-family: 'Arial', sans-serif; /* Mengatur font untuk body */
        background: linear-gradient(to right, #373b44, #4286f4); /* Mengatur latar belakang dengan gradien */
        display: flex; /* Menggunakan flexbox untuk layout */
        flex-direction: column; /* Mengatur arah flex menjadi kolom */
        align-items: center; /* Mengatur item agar terpusat secara horizontal */
        justify-content: center; /* Mengatur item agar terpusat secara vertikal */
        min-height: 100vh; /* Mengatur tinggi minimum body */
        color: #fff; /* Mengatur warna teks menjadi putih */
        overflow-x: hidden; /* Menyembunyikan overflow horizontal */
    }

    .container {
        width: 90%; /* Mengatur lebar kontainer menjadi 90% dari lebar viewport */
        max-width: 800px; /* Mengatur lebar maksimum kontainer */
        padding: 2rem; /* Mengatur padding kontainer */
        background: rgba(255, 255, 255, 0.1); /* Mengatur latar belakang dengan transparansi */
        border-radius: 15px; /* Mengatur sudut kontainer menjadi melengkung */
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15); /* Menambahkan bayangan pada kontainer */
        backdrop-filter: blur(10px); /* Menambahkan efek blur pada latar belakang */
        text-align: center; /* Mengatur teks di dalam kontainer menjadi rata tengah */
        transition: transform 0.3s ease; /* Menambahkan efek transisi pada transformasi */
    }

    header {
        margin-bottom: 2rem; /* Mengatur margin bawah header */
    }

    h1 {
        font-size: 2.5rem; /* Mengatur ukuran font untuk judul */
        font-weight: 700; /* Mengatur ketebalan font untuk judul */
        color: #ffcb00; /* Mengatur warna judul */
        letter-spacing: 0.5px; /* Mengatur jarak antar huruf */
    }

    p {
        font-size: 1rem; /* Mengatur ukuran font untuk paragraf */
        color: #d1d1e0; /* Mengatur warna teks paragraf */
        margin-top: 0.5rem; /* Mengatur margin atas paragraf */
        line-height: 1.6; /* Mengatur tinggi baris untuk paragraf */
    }

    .search-form {
        display: flex; /* Menggunakan flexbox untuk form pencarian */
        justify-content: center; /* Mengatur item agar terpusat secara horizontal */
        gap: 1rem; /* Mengatur jarak antar item dalam form */
        margin-bottom: 2rem; /* Mengatur margin bawah form */
    }

    input[type="text"] {
        width: 70%; /* Mengatur lebar input teks */
        padding: 0.8rem; /* Mengatur padding input teks */
        font-size: 1rem; /* Mengatur ukuran font untuk input teks */
        border: none; /* Menghapus border default */
        border-radius: 8px; /* Mengatur sudut input menjadi melengkung */
        box-shadow: inset 0 0 8px rgba(0, 0, 0, 0.2); /* Menambahkan bayangan dalam pada input */
        transition: transform 0.3s ease, box-shadow 0.3s ease; /* Menambahkan efek transisi pada transformasi dan bayangan */
    }

    input[type="text"]:focus {
        transform: scale(1.05); /* Memperbesar input saat fokus */
        box-shadow: 0 0 15px rgba(255, 203, 0, 0.5); /* Mengubah bayangan saat fokus */
        outline: none; /* Menghapus outline default saat fokus */
    }

    button {
        padding: 0.8rem 1.5rem; /* Mengatur padding untuk tombol */
        font-size: 1rem; /* Mengatur ukuran font untuk tombol */
        font-weight: 600; /* Mengatur ketebalan font untuk tombol */
        background-color: #ffcb00; /* Mengatur warna latar belakang tombol */
        border: none; /* Menghapus border default pada tombol */
        border-radius: 8px; /* Mengatur sudut tombol menjadi melengkung */
        color: #333; /* Mengatur warna teks tombol */
        cursor: pointer; /* Mengubah kursor menjadi pointer saat hover */
        box-shadow: 0 8px 15px rgba(255, 203, 0, 0.3); /* Menambahkan bayangan pada tombol */
        transition: transform 0.3s ease, box-shadow 0.3s ease; /* Menambahkan efek transisi pada transformasi dan bayangan */
    }

    button:hover {
        transform: scale(1.05); /* Memperbesar tombol saat hover */
        box-shadow: 0 10px 20px rgba(255, 203, 0, 0.5); /* Mengubah bayangan saat hover */
    }

    .data-card {
        padding: 1.5rem; /* Mengatur padding untuk kartu data */
        background: rgba(255, 255, 255, 0.15); /* Mengatur latar belakang kartu dengan transparansi */
        border-radius: 10px; /* Mengatur sudut kartu menjadi melengkung */
        margin-bottom: 2rem; /* Mengatur margin bawah kartu */
        text-align: center; /* Mengatur teks di dalam kartu menjadi rata tengah */
        transition: transform 0.3s ease; /* Menambahkan efek transisi pada transformasi */
        line-height: 1.8; /* Mengatur tinggi baris untuk teks dalam kartu */
    }

    .data-card:hover {
        transform: translateY(-5px); /* Menggeser kartu ke atas saat hover */
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15); /* Menambahkan bayangan saat hover */
    }

    .data-card h2 {
        font-size: 1.6rem; /* Mengatur ukuran font untuk subjudul dalam kartu */
        color: #ffcb00; /* Mengatur warna subjudul */
        margin-bottom: 1rem; /* Mengatur margin bawah subjudul */
    }

    .data-card p {
        color: #e0e0e0; /* Mengatur warna teks paragraf dalam kartu */
        font-size: 1rem; /* Mengatur ukuran font untuk paragraf dalam kartu */
        margin-bottom: 1rem; /* Mengatur margin bawah paragraf dalam kartu */
    }

    strong {
        color: #ffcb00; /* Mengatur warna teks tebal */
    }

    .highlight {
        color: #ffcb00; /* Mengatur warna teks yang disorot menjadi kuning */
        font-weight: bold; /* Mengatur ketebalan font yang disorot */
    }

    .chart-container {
        position: relative; /* Mengatur posisi relatif untuk kontainer grafik */
        width: 100%; /* Mengatur lebar kontainer grafik menjadi 100% */
        height: 300px; /* Mengatur tinggi kontainer grafik */
        overflow: hidden; /* Menyembunyikan overflow pada kontainer grafik */
    }

    canvas {
        max-width: 100%; /* Mengatur lebar maksimum canvas */
        height: 100%; /* Mengatur tinggi canvas agar mengisi kontainer */
    }

    .weather-icons {
        display: flex; /* Menggunakan flexbox untuk ikon cuaca */
        justify-content: space-around; /* Mengatur item agar tersebar merata */
        align-items: center; /* Mengatur item agar terpusat secara vertikal */
        margin: 1rem 0; /* Mengatur margin atas dan bawah untuk ikon cuaca */
    }

    .icon {
        font-size: 3rem; /* Mengatur ukuran font untuk ikon */
        transition: color 0.3s ease, transform 0.3s ease; /* Menambahkan efek transisi pada warna dan transformasi */
        display: inline-block; /* Mengatur ikon sebagai inline-block */
        vertical-align: middle; /* Mengatur perataan vertikal ikon */
        position: relative; /* Mengatur posisi relatif untuk ikon */
        color: #fff; /* Mengatur warna ikon default menjadi putih */
    }

    .icon span {
        display: block; /* Mengatur span sebagai block */
        font-size: 1rem; /* Mengatur ukuran font untuk label ikon */
        text-align: center; /* Mengatur teks label menjadi rata tengah */
        margin-top: 0.5rem; /* Mengatur margin atas untuk label ikon */
        color: #fff; /* Mengatur warna label ikon menjadi putih */
    }

    /* Warna Ikon Suhu */
    .temperature {
        color: #ffcb00; /* Warna default untuk ikon suhu */
    }

    .temperature.low {
        color: #003366; /* Warna biru gelap untuk suhu rendah */
    }

    .temperature.high {
        color: #ffffff; /* Warna putih untuk suhu tinggi */
    }

    .temperature.normal {
        color: #66ccff; /* Warna biru muda untuk suhu normal */
    }

    /* Warna Ikon Kelembaban */
    .humidity {
        color: #ffcb00; /* Warna default untuk ikon kelembaban */
    }

    .humidity.dry {
        color: #003366; /* Warna biru gelap untuk kelembaban rendah */
    }

    .humidity.wet {
        color: #66ccff; /* Warna biru muda untuk kelembaban tinggi */
    }

    /* Warna Ikon Curah Hujan */
    .rainfall {
        color: #ffcb00; /* Warna default untuk ikon curah hujan */
    }

    .rainfall.low {
        color: #66ccff; /* Warna biru muda untuk curah hujan rendah */
    }

    .rainfall.high {
        color: #003366; /* Warna biru gelap untuk curah hujan tinggi */
    }

    footer {
        text-align: center; /* Mengatur teks footer menjadi rata tengah */
        margin-top: 1.5rem; /* Mengatur margin atas footer */
        padding: 1rem; /* Mengatur padding footer */
        font-size: 0.9rem; /* Mengatur ukuran font untuk footer */
        color: #e0e0e0; /* Mengatur warna teks footer */
        border-top: 1px solid rgba(255, 255, 255, 0.2); /* Menambahkan border atas pada footer */
    }

    footer p {
        margin-top: 0.5rem; /* Mengatur margin atas untuk paragraf dalam footer */
    }

    /* Gaya Responsif */
    @media (max-width: 600px) {
        h1 {
            font-size: 2rem; /* Mengatur ukuran font judul lebih kecil pada perangkat mobile */
        }

        .icon {
            font-size: 2.5rem; /* Mengatur ukuran ikon lebih kecil pada perangkat mobile */
        }

        .data-card h2 {
            font-size: 1.4rem; /* Mengatur ukuran font subjudul lebih kecil pada perangkat mobile */
        }

        .data-card p {
            font-size: 0.9rem; /* Mengatur ukuran font paragraf lebih kecil pada perangkat mobile */
        }

        button {
            padding: 0.6rem 1rem; /* Mengatur padding tombol lebih kecil pada perangkat mobile */
            font-size: 0.9rem; /* Mengatur ukuran font tombol lebih kecil pada perangkat mobile */
        }
    }
  </style>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script> <!-- Menghubungkan ke Chart.js untuk grafik -->
</head>
<body>
  <div class="container"> <!-- Kontainer utama untuk semua elemen -->
    <header>
      <h1>Prediksi Hama Berdasarkan Cuaca</h1> <!-- Judul utama -->
      <p>Perkirakan jenis hama yang mungkin muncul berdasarkan kondisi cuaca di lokasi Anda.</p> <!-- Deskripsi singkat -->
    </header>

    <form id="search-form" class="search-form"> <!-- Form pencarian -->
      <input type="text" id="city" placeholder="Masukkan nama kota (misalnya: Surabaya)" required> <!-- Input untuk nama kota -->
      <button type="submit">Cari</button> <!-- Tombol untuk mengirim form -->
    </form>

    <div id="weather-data" class="data-card"> <!-- Kartu untuk menampilkan data cuaca -->
      <h2>Data Cuaca</h2> <!-- Subjudul untuk data cuaca -->
      <div class="weather-icons"> <!-- Kontainer untuk ikon cuaca -->
        <div class="icon temperature" aria-label="Suhu"> <!-- Ikon suhu -->
          <i class="fas fa-thermometer-half"></i> <!-- Ikon termometer -->
          <span id="temp-label">0°C</span> <!-- Label untuk suhu -->
        </div>
        <div class="icon humidity" aria-label="Kelembaban"> <!-- Ikon kelembaban -->
          <i class="fas fa-tint"></i> <!-- Ikon tetesan air -->
          <span id="humidity-label">0%</span> <!-- Label untuk kelembaban -->
        </div>
        <div class="icon rainfall" aria-label="Curah Hujan"> <!-- Ikon curah hujan -->
          <i class="fas fa-water"></i> <!-- Ikon air -->
          <span id="rainfall-label">0 mm/jam</span> <!-- Label untuk curah hujan -->
        </div>
      </div>
    </div>

    <div id="prediction-data" class="data-card"> <!-- Kartu untuk menampilkan prediksi hama -->
      <h2>Prediksi Hama</h2> <!-- Subjudul untuk prediksi hama -->
      <p>Prediksi dan rekomendasi akan ditampilkan di sini setelah pencarian.</p> <!-- Pesan default sebelum pencarian -->
    </div>

    <div class="data-card"> <!-- Kartu untuk grafik prediksi hama -->
      <h2>Grafik Prediksi Hama</h2> <!-- Subjudul untuk grafik -->
      <div class="chart-container"> <!-- Kontainer untuk grafik -->
        <canvas id="pestChart"></canvas> <!-- Elemen canvas untuk grafik -->
      </div>
    </div>
  </div>

  <footer> <!-- Footer halaman -->
    <p>&copy; 2024 Prediksi Hama dan Cuaca | All Rights Reserved</p> <!-- Teks hak cipta -->
  </footer>

  <script>
    const apiKey = 'ba2c1bd1b038f4e4394d91ebc4c2e0bc'; // Kunci API untuk OpenWeatherMap
    const form = document.getElementById('search-form'); // Mengambil elemen form pencarian
    const weatherDataDiv = document.getElementById('weather-data'); // Mengambil elemen untuk data cuaca
    const predictionDataDiv = document.getElementById('prediction-data'); // Mengambil elemen untuk prediksi hama
    const ctx = document.getElementById('pestChart').getContext('2d'); // Mengambil konteks 2D untuk canvas grafik
    let pestChart; // Variabel untuk menyimpan instance grafik

    // Fungsi untuk memprediksi hama berdasarkan suhu, kelembaban, dan curah hujan
    function predictPests(temp, humidity, rain) {
        const coefficients = { // Koefisien untuk setiap jenis hama
            brownPlanthopper: { temp: 0.3, humidity: 0.4, rain: 0.3 },
            stemBorer: { temp: 0.2, humidity: 0.5, rain: 0.3 },
            leafBlast: { temp: 0.4, humidity: 0.3, rain: 0.3 },
            riceFieldRat: { temp: 0.5, humidity: 0.2, rain: 0.3 }
        };

        return [ // Mengembalikan array prediksi hama
            { name: 'Wereng Coklat', value: temp * coefficients.brownPlanthopper.temp + humidity * coefficients.brownPlanthopper.humidity + rain * coefficients.brownPlanthopper.rain },
            { name: 'Penggerek Batang', value: temp * coefficients.stemBorer.temp + humidity * coefficients.stemBorer.humidity + rain * coefficients.stemBorer.rain },
            { name: 'Penyakit Blas', value: temp * coefficients.leafBlast.temp + humidity * coefficients.leafBlast.humidity + rain * coefficients.leafBlast.rain },
            { name: 'Tikus Sawah', value: temp * coefficients.riceFieldRat.temp + humidity * coefficients.riceFieldRat.humidity + rain * coefficients.riceFieldRat.rain }
        ];
    }

    // Fungsi untuk menghasilkan prediksi hama selama 30 hari ke depan
    function generatePredictions(temp, humidity, rain) {
        const predictions = []; // Array untuk menyimpan prediksi
        const today = new Date(); // Mendapatkan tanggal hari ini
        for (let day = 0; day < 30; day++) { // Loop untuk 30 hari ke depan
            const futureDate = new Date(today); // Membuat objek tanggal baru
            futureDate.setDate(today.getDate() + day); // Mengatur tanggal ke hari yang akan datang
            predictions.push({ // Menambahkan prediksi ke array
                date: futureDate.toLocaleDateString('id-ID', { day: '2-digit', month: 'short', year: 'numeric' }), // Format tanggal
                pests: predictPests(temp + (Math.random() * 2 - 1), humidity + (Math.random() * 5 - 2.5), rain + (Math.random() * 1 - 0.5)) // Menghasilkan prediksi hama
            });
        }
        return predictions; // Mengembalikan array prediksi
    }

    // Fungsi untuk memperbarui grafik dengan data prediksi
    function updateChart(predictions) {
        const labels = predictions.map(prediction => prediction.date); // Mengambil tanggal dari prediksi
        const datasets = ['Wereng Coklat', 'Penggerek Batang', 'Penyakit Blas', 'Tikus Sawah'].map((name, i) => ({ // Membuat dataset untuk grafik
            label: name, // Nama dataset
            data: predictions.map(prediction => prediction.pests[i].value), // Data untuk dataset
            backgroundColor: ['#F57C00', '#0288D1', '#D32F2F', '#7B1FA2'][i], // Warna latar belakang
            borderColor: ['#BF360C', '#01579B', '#B71C1C', '#4A0072'][i], // Warna border
            borderWidth: 2, // Lebar border
            fill: false // Tidak mengisi area di bawah grafik
        }));

        if (pestChart) pestChart.destroy(); // Menghancurkan grafik sebelumnya jika ada

        pestChart = new Chart(ctx, { // Membuat grafik baru
            type: 'line', // Tipe grafik
            data: {
                labels: labels, // Label sumbu X
                datasets: datasets // Dataset untuk grafik
            },
            options: {
                responsive: true, // Membuat grafik responsif
                maintainAspectRatio: false, // Mengizinkan grafik untuk mengisi kontainer
                plugins: {
                    legend: {
                        labels: {
                            color: '#FFFFFF', // Warna label legenda
                            font: {
                                size: 14, // Ukuran font untuk label legenda
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        ticks: {
                            color: '#FFFFFF', // Warna ticks sumbu X
                            font: {
                                size: 12 // Ukuran font untuk ticks sumbu X
                            }
                        }
                    },
                    y: {
                        ticks: {
                            color: '#FFFFFF', // Warna ticks sumbu Y
                            font: {
                                size: 12 // Ukuran font untuk ticks sumbu Y
                            }
                        }
                    }
                }
            }
        });
    }

    // Fungsi untuk memperbarui ikon cuaca berdasarkan data
    function updateWeatherIcons(temp, humidity, rain) {
        const tempLabel = document.getElementById('temp-label'); // Mengambil elemen label suhu
        const humidityLabel = document.getElementById('humidity-label'); // Mengambil elemen label kelembaban
        const rainfallLabel = document.getElementById('rainfall-label'); // Mengambil elemen label curah hujan

        // Memperbarui ikon suhu
        const tempIcon = document.querySelector('.temperature'); // Mengambil elemen ikon suhu
        tempLabel.textContent = `${temp}°C`; // Memperbarui teks label suhu
        if (temp < 20) { // Jika suhu rendah
            tempIcon.classList.add('low'); // Menambahkan kelas untuk suhu rendah
            tempIcon.classList.remove('high', 'normal'); // Menghapus kelas untuk suhu tinggi dan normal
        } else if (temp > 30) { // Jika suhu tinggi
            tempIcon.classList.add('high'); // Menambahkan kelas untuk suhu tinggi
            tempIcon.classList.remove('low', 'normal'); // Menghapus kelas untuk suhu rendah dan normal
        } else { // Jika suhu normal
            tempIcon.classList.add('normal'); // Menambahkan kelas untuk suhu normal
            tempIcon.classList.remove('low', 'high'); // Menghapus kelas untuk suhu rendah dan tinggi
        }

        // Memperbarui ikon kelembaban
        const humidityIcon = document.querySelector('.humidity'); // Mengambil elemen ikon kelembaban
        humidityLabel.textContent = `${humidity}%`; // Memperbarui teks label kelembaban
        if (humidity < 40) { // Jika kelembaban rendah
            humidityIcon.classList.add('dry'); // Menambahkan kelas untuk kelembaban rendah
            humidityIcon.classList.remove('wet'); // Menghapus kelas untuk kelembaban tinggi
        } else if (humidity > 70) { // Jika kelembaban tinggi
            humidityIcon.classList.add('wet'); // Menambahkan kelas untuk kelembaban tinggi
            humidityIcon.classList.remove('dry'); // Menghapus kelas untuk kelembaban rendah
        } else { // Jika kelembaban normal
            humidityIcon.classList.remove('dry', 'wet'); // Menghapus kelas untuk kelembaban rendah dan tinggi
        }

        // Memperbarui ikon curah hujan
        const rainfallIcon = document.querySelector('.rainfall'); // Mengambil elemen ikon curah hujan
        rainfallLabel.textContent = `${rain} mm/jam`; // Memperbarui teks label curah hujan
        if (rain < 2) { // Jika curah hujan rendah
            rainfallIcon.classList.add('low'); // Menambahkan kelas untuk curah hujan rendah
            rainfallIcon.classList.remove('high'); // Menghapus kelas untuk curah hujan tinggi
        } else if (rain > 10) { // Jika curah hujan tinggi
            rainfallIcon.classList.add('high'); // Menambahkan kelas untuk curah hujan tinggi
            rainfallIcon.classList.remove('low'); // Menghapus kelas untuk curah hujan rendah
        } else { // Jika curah hujan normal
            rainfallIcon.classList.remove('low', 'high'); // Menghapus kelas untuk curah hujan rendah dan tinggi
        }
    }

    // Event listener untuk form pencarian
    form.addEventListener('submit', async (event) => {
        event.preventDefault(); // Mencegah form dari pengiriman default
        const city = document.getElementById('city').value; // Mengambil nilai dari input kota

        try {
            const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`); // Mengambil data cuaca dari API
            if (!response.ok) throw new Error('Kota tidak ditemukan.'); // Menangani kesalahan jika kota tidak ditemukan
            const data = await response.json(); // Mengonversi respons menjadi JSON

            const { temp, humidity } = data.main; // Mengambil suhu dan kelembaban dari data cuaca
            const rain = data.rain ? data.rain['1h'] || 0 : 0; // Mengambil curah hujan, jika ada

            updateWeatherIcons(temp, humidity, rain); // Memperbarui ikon cuaca

            const predictions = generatePredictions(temp, humidity, rain); // Menghasilkan prediksi hama

            const aggregatedPredictions = predictions[0].pests.map((pest, i) => { // Menghitung rata-rata prediksi hama
                return {
                    name: pest.name, // Nama hama
                    value: predictions.reduce((sum, dayPrediction) => sum + dayPrediction.pests[i].value, 0) / predictions.length // Rata-rata nilai prediksi
                };
            });

            aggregatedPredictions.sort((a, b) => b.value - a.value); // Mengurutkan prediksi berdasarkan nilai

            // Rekomendasi untuk setiap jenis hama
            const recommendations = {
                'Wereng Coklat': 'Gunakan varietas padi tahan wereng dan aplikasikan insektisida bila serangan berat.',
                'Penggerek Batang': 'Lakukan pemantauan rutin, sanitasi lahan, dan gunakan perangkap feromon.',
                'Penyakit Blas': 'Gunakan fungisida berbahan aktif sesuai rekomendasi dan hindari penggunaan pupuk nitrogen berlebih.',
                'Tikus Sawah': 'Pasang perangkap tikus, lakukan sanitasi lahan, dan hindari penanaman serempak.'
            };

            // Memperbarui konten prediksi hama
            const maxPrediction = Math.max(...aggregatedPredictions.map(p => p.value)); // Mencari nilai maksimum
            predictionDataDiv.innerHTML = `
              <h2>Prediksi Hama</h2>
              <p>Hama yang paling mungkin muncul: <strong>${aggregatedPredictions[0].name}</strong></p>
              <p>Rekomendasi: ${recommendations[aggregatedPredictions[0].name]}</p>
              <p>Prediksi lengkap: ${aggregatedPredictions.map(p => `${p.name}: ${p.value === maxPrediction ? `<strong class="highlight">${p.value.toFixed(2)}</strong>` : p.value.toFixed(2)}`).join(', ')}</p>
            `;

            updateChart(predictions); // Memperbarui grafik dengan data prediksi
        } catch (error) {
            alert(error.message); // Menampilkan pesan kesalahan jika terjadi
        }
    });
  </script>
</body>
</html>
